https://stackoverflow.com/questions/1099025/spring-transactional-what-happens-in-background


Spring @Repository
Spring @Component
Spring - @Transactional - What happens in background?



This is a big topic. The Spring reference doc devotes multiple chapters to it. I recommend reading the ones on Aspect-Oriented Programming and Transactions, as Spring's declarative transaction support uses AOP at its foundation.

But at a very high level, Spring creates proxies for classes that declare @Transactional on the class itself or on members. The proxy is mostly invisible at runtime. It provides a way for Spring to inject behaviors before, after, or around method calls into the object being proxied. Transaction management is just one example of the behaviors that can be hooked in. Security checks are another. And you can provide your own, too, for things like logging. So when you annotate a method with @Transactional, Spring dynamically creates a proxy that implements the same interface(s) as the class you're annotating. And when clients make calls into your object, the calls are intercepted and the behaviors injected via the proxy mechanism.

Transactions in EJB work similarly, by the way.

As you observed, through, the proxy mechanism only works when calls come in from some external object. When you make an internal call within the object, you're really making a call through the "this" reference, which bypasses the proxy. There are ways of working around that problem, however. I explain one approach in this forum post in which I use a BeanFactoryPostProcessor to inject an instance of the proxy into "self-referencing" classes at runtime. I save this reference to a member variable called "me". Then if I need to make internal calls that require a change in the transaction status of the thread, I direct the call through the proxy (e.g. "me.someMethod()".) The forum post explains in more detail. Note that the BeanFactoryPostProcessor code would be a little different now, as it was written back in the Spring 1.x timeframe. But hopefully it gives you an idea. I have an updated version that I could probably make available.
shareimprove this answer
answered Jul 8 '09 at 16:50
Rob H
9,65883341

    1
    >> The proxy is mostly invisible at runtime Oh !! I am curious to see them :) Rest.. your answer was very comprehensive. This is the second time you are helping me..Thanks for all the help. – peakit Jul 8 '09 at 17:37
    9
    No problem. You can see the proxy code if you step through with a debugger. That's probably the easiest way. There's no magic; they're just classes within the Spring packages. – Rob H Jul 8 '09 at 17:47
    And if the method which has the @Transaction annotation is implementing an interface the spring will use the dynamic proxy API to inject the transactionalisation and not use proxies. I prefer to have my transactionalised classes implement interfaces in any case. – Michael Wiles Jul 10 '09 at 14:12
    1
    I found the “me” scheme too (using explicit wiring to do it as it suits the way I think), but I think that if you're doing it that way, you're probably better off refactoring so that you don't have to. But yes, that might sometimes be very awkward! – Donal Fellows Feb 2 '13 at 23:31
    does @Transactional also close a session opened with sessionFactory.getCurrentSession() – kapad Jul 7 '15 at 14:45

show 2 more comments
up vote
154
down vote

When Spring loads your bean definitions, and has been configured to look for @Transactional annotations, it will create these proxy objects around your actual bean. These proxy objects are instances of classes that are auto-generated at runtime. The default behaviour of these proxy objects when a method is invoked is just to invoke the same method on the "target" bean (i.e. your bean).

However, the proxies can also be supplied with interceptors, and when present these interceptors will be invoked by the proxy before it invokes your target bean's method. For target beans annotated with @Transactional, Spring will create a TransactionInterceptor, and pass it to the generated proxy object. So when you call the method from client code, you're calling the method on the proxy object, which first invokes the TransactionInterceptor (which begins a transaction), which in turn invokes the method on your target bean. When the invocation finishes, the TransactionInterceptor commits/rolls back the transaction. It's transparent to the client code.

As for the "external method" thing, if your bean invokes one of its own methods, then it will not be doing so via the proxy. Remember, Spring wraps your bean in the proxy, your bean has no knowledge of it. Only calls from "outside" your bean go through the proxy.

Does that help?
shareimprove this answer
answered Jul 8 '09 at 16:59
skaffman
332k83721716

    23
    >Remember, Spring wraps your bean in the proxy, your bean has no knowledge of it This said it all. What a great answer. Thanks for helping. – peakit Jul 8 '09 at 17:39
    Great explanation, for the proxy and interceptors. Now i understand spring implement a proxy object to intercept calls to a target bean. Thank you! – dharag Aug 20 '13 at 15:39
    5
    The answer is so great that I just tried to upvote it only to be presented with an error message that I have already upvoted it before ! – Mustafa Feb 14 '15 at 19:22
    1
    what a great answer, thinks mate – elkorchi anas Jan 15 '16 at 16:05
    Yes it does, Thanks mate. – Jobin Joseph Sep 10 at 4:12

add a comment
up vote
30
down vote

As a visual person, I like to weigh in with a sequence diagram of the proxy pattern. If you don't know how to read the arrows, I read the first one like this: Client executes Proxy.method().

    The client calls a method on the target from his perspective, and is silently intercepted by the proxy
    If a before aspect is defined, the proxy will execute it
    Then, the actual method (target) is executed
    After-returning and after-throwing are optional aspects that are executed after the method returns and/or if the method throws an exception
    After that, the proxy executes the after aspect (if defined)
    Finally the proxy returns to the calling client

Proxy Pattern Sequence Diagram (I was allowed to post the photo on condition that I mentioned its origins. Author: Noel Vaes, website: www.noelvaes.eu)
shareimprove this answer
edited Feb 24 '17 at 8:48
answered Oct 21 '16 at 9:40
progonkpa
6781920
add a comment